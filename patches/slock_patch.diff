diff --git a/config.def.h b/config.def.h
index 699f5b6..dabb161 100644
--- a/config.def.h
+++ b/config.def.h
@@ -22,3 +22,9 @@ static const char * text_color = "#ffffff";
 
 /* text size (must be a valid size) */
 static const char * text_size = "fixed";
+
+/* time in seconds to cancel lock with mouse movement */
+static const int timetocancel = 5;
+
+/* time in seconds before the monitor shuts down */
+static const int monitortime = 10;
diff --git a/config.h b/config.h
index e7158a3..df85c07 100644
--- a/config.h
+++ b/config.h
@@ -3,9 +3,9 @@ static const char *user  = "nobody";
 static const char *group = "nobody";
 
 static const char *colorname[NUMCOLS] = {
-	[INIT] =   "#000000",   /* after initialization */
-	[INPUT] =  "#282c34",   /* during input */
-	[FAILED] = "#be5046",   /* wrong password */
+	[INIT] =   "#151515",   /* after initialization */
+	[INPUT] =  "#e454f1",   /* during input */
+	[FAILED] = "#ec456b",   /* wrong password */
 };
 
 /* lock screen opacity */
@@ -15,10 +15,16 @@ static const float alpha = 0.5;
 static const int failonclear = 1;
 
 /* default message */
-static const char * message = "Enter password to unlock";
+static const char * message = "";
 
 /* text color */
-static const char * text_color = "#abb2bf";
+static const char * text_color = "#e2ecf7";
 
 /* text size (must be a valid size) */
 static const char * text_size = "fixed";
+
+/* time in seconds to cancel lock with mouse movement */
+static const int timetocancel = 5;
+
+/* time in seconds before the monitor shuts down */
+static const int monitortime = 10;
diff --git a/slock.c b/slock.c
index d5e29ba..f579686 100644
--- a/slock.c
+++ b/slock.c
@@ -13,8 +13,10 @@
 #include <stdio.h>
 #include <string.h>
 #include <unistd.h>
+#include <time.h>
 #include <sys/types.h>
 #include <X11/extensions/Xrandr.h>
+#include <X11/extensions/dpms.h>
 #include <X11/keysym.h>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
@@ -25,6 +27,8 @@
 
 char *argv0;
 
+static time_t locktime;
+
 enum {
 	INIT,
 	INPUT,
@@ -207,6 +211,7 @@ readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
 	oldc = INIT;
 
 	while (running && !XNextEvent(dpy, &ev)) {
+		running = !((time(NULL) - locktime < timetocancel) && (ev.type == MotionNotify));
 		if (ev.type == KeyPress) {
 			explicit_bzero(&buf, sizeof(buf));
 			num = XLookupString(&ev.xkey, buf, sizeof(buf), &ksym, 0);
@@ -335,6 +340,7 @@ lockscreen(Display *dpy, struct xrandr *rr, int screen)
 				XRRSelectInput(dpy, lock->win, RRScreenChangeNotifyMask);
 
 			XSelectInput(dpy, lock->root, SubstructureNotifyMask);
+			locktime = time(NULL);
 			unsigned int opacity = (unsigned int)(alpha * 0xffffffff);
 			XChangeProperty(dpy, lock->win, XInternAtom(dpy, "_NET_WM_WINDOW_OPACITY", False), XA_CARDINAL, 32, PropModeReplace, (unsigned char *)&opacity, 1L);
 			XSync(dpy, False);
@@ -376,6 +382,7 @@ main(int argc, char **argv) {
 	const char *hash;
 	Display *dpy;
 	int s, nlocks, nscreens;
+	CARD16 standby, suspend, off;
 
 	ARGBEGIN {
 	case 'v':
@@ -441,6 +448,20 @@ main(int argc, char **argv) {
 	if (nlocks != nscreens)
 		return 1;
 
+	/* DPMS magic to disable the monitor */
+	if (!DPMSCapable(dpy))
+		die("slock: DPMSCapable failed\n");
+	if (!DPMSEnable(dpy))
+		die("slock: DPMSEnable failed\n");
+	if (!DPMSGetTimeouts(dpy, &standby, &suspend, &off))
+		die("slock: DPMSGetTimeouts failed\n");
+	if (!standby || !suspend || !off)
+		die("slock: at least one DPMS variable is zero\n");
+	if (!DPMSSetTimeouts(dpy, monitortime, monitortime, monitortime))
+		die("slock: DPMSSetTimeouts failed\n");
+
+	XSync(dpy, 0);
+
 	/* run post-lock command */
 	if (argc > 0) {
 		switch (fork()) {
@@ -458,5 +479,9 @@ main(int argc, char **argv) {
 	/* everything is now blank. Wait for the correct password */
 	readpw(dpy, &rr, locks, nscreens, hash);
 
+	/* reset DPMS values to inital ones */
+	DPMSSetTimeouts(dpy, standby, suspend, off);
+	XSync(dpy, 0);
+
 	return 0;
 }
