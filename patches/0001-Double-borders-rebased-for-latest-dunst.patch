From ee9426c39d5f857a305d964efc037557c1c1f202 Mon Sep 17 00:00:00 2001
From: fortuneteller2k <lythe1107@gmail.com>
Date: Sun, 13 Feb 2022 15:02:59 +0800
Subject: [PATCH] Double-borders rebased for latest dunst

Original author: https://github.com/Barbarossa93
Source: https://github.com/Barbarossa93/dunst/
---
 docs/dunst.5.pod    | 11 +++++++++-
 src/draw.c          | 47 ++++++++++++++++++++++++++++++++---------
 src/notification.c  |  4 ++++
 src/notification.h  |  1 +
 src/rules.c         |  4 ++++
 src/rules.h         |  1 +
 src/settings.c      |  1 +
 src/settings.h      |  2 ++
 src/settings_data.h | 51 +++++++++++++++++++++++++++++++++++++++++++++
 9 files changed, 111 insertions(+), 11 deletions(-)

diff --git a/docs/dunst.5.pod b/docs/dunst.5.pod
index 5dce49d..ba3b38d 100644
--- a/docs/dunst.5.pod
+++ b/docs/dunst.5.pod
@@ -240,6 +240,11 @@ is equivalent to
 Defines width in pixels of frame around the notification window. Set to 0 to
 disable.
 
+=item B<outer_frame_width> (default: 0)
+
+Defines width in pixels of frame around the frame. Set to 0 to
+disable.
+
 =item B<separator_color> (values: [auto/foreground/frame/#RRGGBB] default: frame)
 
 Sets the color of the separator line between two notifications.
@@ -563,7 +568,7 @@ the notification sent before the user defined timeout.
 The urgency sections work in a similar way to rules and can be used to specify
 attributes for the different urgency levels of notifications (low, normal,
 critical). Currently only the background, foreground, hightlight, timeout,
-frame_color and icon attributes can be modified.
+frame_color, outer_frame_color and icon attributes can be modified.
 
 The urgency sections are urgency_low, urgency_normal, urgency_critical for low,
 normal and critical urgency respectively.
@@ -799,6 +804,10 @@ Equivalent to the C<format> setting.
 
 The frame color color of the notification. See COLORS for possible values.
 
+=item C<outer_frame_color>
+
+The outer frame color color of the notification. See COLORS for possible values.
+
 =item C<fullscreen>
 
 One of show, delay, or pushback.
diff --git a/src/draw.c b/src/draw.c
index 58c83a1..7dfcd3a 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -35,6 +35,7 @@ struct colored_layout {
         struct color bg;
         struct color highlight;
         struct color frame;
+        struct color outer_frame;
         char *text;
         PangoAttrList *attr;
         cairo_surface_t *icon;
@@ -296,7 +297,7 @@ static struct dimensions calculate_dimensions(GSList *layouts)
         struct dimensions dim = { 0 };
         double scale = output->get_scale();
 
-        dim.h += 2 * settings.frame_width;
+        dim.h += (2 * settings.frame_width) + ( 2 * settings.outer_frame_width);
         dim.h += (g_slist_length(layouts) - 1) * settings.separator_height;
 
         dim.corner_radius = settings.corner_radius;
@@ -309,7 +310,7 @@ static struct dimensions calculate_dimensions(GSList *layouts)
                 dim.w = MAX(dim.w, n_dim.w + settings.frame_width);
         }
 
-        dim.w += 2 * settings.frame_width;
+        dim.w += 2 * settings.frame_width + 2 * settings.outer_frame_width;
         dim.corner_radius = MIN(dim.corner_radius, dim.h/2);
 
         /* clamp max width to screen width */
@@ -345,6 +346,7 @@ static struct colored_layout *layout_init_shared(cairo_t *c, struct notification
         cl->bg = string_to_color(n->colors.bg);
         cl->highlight = string_to_color(n->colors.highlight);
         cl->frame = string_to_color(n->colors.frame);
+	cl->outer_frame = string_to_color(n->colors.outer_frame);
         cl->is_xmore = false;
 
         cl->n = n;
@@ -575,39 +577,64 @@ static cairo_surface_t *render_background(cairo_surface_t *srf,
         cairo_set_operator(c, CAIRO_OPERATOR_ADD);
 
         if (first)
-                height += settings.frame_width;
+                height += settings.frame_width + settings.outer_frame_width;
         if (last)
-                height += settings.frame_width;
+                height += settings.frame_width + settings.outer_frame_width;
         else
                 height += settings.separator_height;
 
         draw_rounded_rect(c, x, y, width, height, corner_radius, scale, first, last);
 
-        /* adding frame */
+        /* adding outer frame */
+        x += settings.outer_frame_width;
+        
+        if (first) {
+                y += settings.outer_frame_width;
+                height -= settings.outer_frame_width;
+        }
+
+        width -= (2 * settings.outer_frame_width);
+
+        if (last) {
+                height -= settings.outer_frame_width;
+        }
+
+        draw_rounded_rect(c, x, y, width, height, corner_radius, scale, first, last); 
+
+        /* adding inner frame */
         x += settings.frame_width;
         if (first) {
                 y += settings.frame_width;
                 height -= settings.frame_width;
         }
 
-        width -= 2 * settings.frame_width;
+        width -= (2 * settings.frame_width);
 
-        if (last)
+        if (last) {
                 height -= settings.frame_width;
+        }
         else
                 height -= settings.separator_height;
 
         radius_int = frame_internal_radius(corner_radius, settings.frame_width, height);
 
+        // Draw outer frame first
         draw_rounded_rect(c, x, y, width, height, radius_int, scale, first, last);
+        cairo_set_source_rgba(c, cl->outer_frame.r, cl->outer_frame.g, cl->outer_frame.b, cl->outer_frame.a);
+        cairo_fill(c);        
+
+        //Draw inner frame next
+        cairo_set_operator(c, CAIRO_OPERATOR_DEST_OVER);
+        draw_rounded_rect(c, x-(settings.frame_width), y-settings.frame_width, width+2*settings.frame_width, height+2*settings.frame_width+settings.separator_height, radius_int, scale, first, last);
         cairo_set_source_rgba(c, cl->frame.r, cl->frame.g, cl->frame.b, cl->frame.a);
         cairo_fill(c);
 
+        //Draw main body background
+        cairo_set_operator(c, CAIRO_OPERATOR_SOURCE);
         draw_rounded_rect(c, x, y, width, height, radius_int, scale, first, last);
         cairo_set_source_rgba(c, cl->bg.r, cl->bg.g, cl->bg.b, cl->bg.a);
         cairo_fill(c);
 
-        cairo_set_operator(c, CAIRO_OPERATOR_SOURCE);
 
         if (   settings.sep_color.type != SEP_FRAME
             && settings.separator_height > 0
@@ -615,7 +642,7 @@ static cairo_surface_t *render_background(cairo_surface_t *srf,
                 struct color sep_color = layout_get_sepcolor(cl, cl_next);
                 cairo_set_source_rgba(c, sep_color.r, sep_color.g, sep_color.b, sep_color.a);
 
-                draw_rect(c, settings.frame_width, y + height, width, settings.separator_height, scale);
+                draw_rect(c, settings.frame_width + settings.outer_frame_width, y + height, width, settings.separator_height, scale);
 
                 cairo_fill(c);
         }
@@ -780,7 +807,7 @@ static struct dimensions layout_render(cairo_surface_t *srf,
 
         /* adding frame */
         if (first)
-                dim.y += settings.frame_width;
+                dim.y += settings.frame_width + settings.outer_frame_width;
 
         if (!last)
                 dim.y += settings.separator_height;
diff --git a/src/notification.c b/src/notification.c
index a48c5b4..19b43cd 100644
--- a/src/notification.c
+++ b/src/notification.c
@@ -68,6 +68,7 @@ void notification_print(const struct notification *n)
         printf("\tbg: %s\n", n->colors.bg);
         printf("\thighlight: %s\n", n->colors.highlight);
         printf("\tframe: %s\n", n->colors.frame);
+        printf("\touter_frame: %s\n", n->colors.outer_frame);
         printf("\tfullscreen: %s\n", enum_to_string_fullscreen(n->fullscreen));
         printf("\tformat: %s\n", n->format);
         printf("\tprogress: %d\n", n->progress);
@@ -287,6 +288,7 @@ void notification_unref(struct notification *n)
         g_free(n->colors.bg);
         g_free(n->colors.highlight);
         g_free(n->colors.frame);
+        g_free(n->colors.outer_frame);
         g_free(n->stack_tag);
         g_free(n->desktop_entry);
 
@@ -479,6 +481,8 @@ void notification_init(struct notification *n)
                 n->colors.highlight = g_strdup(defcolors.highlight);
         if (!n->colors.frame)
                 n->colors.frame = g_strdup(defcolors.frame);
+        if (!n->colors.outer_frame)
+                n->colors.outer_frame = g_strdup(defcolors.outer_frame);
 
         /* Sanitize misc hints */
         if (n->progress < 0)
diff --git a/src/notification.h b/src/notification.h
index 3bee577..e7d5a4c 100644
--- a/src/notification.h
+++ b/src/notification.h
@@ -39,6 +39,7 @@ typedef struct _notification_private NotificationPrivate;
 
 struct notification_colors {
         char *frame;
+        char *outer_frame;
         char *bg;
         char *fg;
         char *highlight;
diff --git a/src/rules.c b/src/rules.c
index 0e562a2..be31c34 100644
--- a/src/rules.c
+++ b/src/rules.c
@@ -71,6 +71,10 @@ void rule_apply(struct rule *r, struct notification *n)
                 g_free(n->colors.frame);
                 n->colors.frame = g_strdup(r->fc);
         }
+        if (r->ofc) {
+                g_free(n->colors.outer_frame);
+                n->colors.outer_frame = g_strdup(r->ofc);
+        }
         if (r->format)
                 n->format = r->format;
         if (r->default_icon) {
diff --git a/src/rules.h b/src/rules.h
index 6446a35..ec1411d 100644
--- a/src/rules.h
+++ b/src/rules.h
@@ -48,6 +48,7 @@ struct rule {
         char *highlight;
         char *default_icon;
         char *fc;
+	char *ofc;
         char *set_category;
         const char *format;
         const char *script;
diff --git a/src/settings.c b/src/settings.c
index 1c18a25..db91e3c 100644
--- a/src/settings.c
+++ b/src/settings.c
@@ -119,6 +119,7 @@ void print_rule(struct rule* r) {
         LOG_D("appname %s", r->appname);
         LOG_D("script %s", r->script);
         LOG_D("frame %s", r->fc);
+        LOG_D("outer_frame %s", r->ofc);
 }
 
 void check_and_correct_settings(struct settings *s) {
diff --git a/src/settings.h b/src/settings.h
index ac84260..d2ac0de 100644
--- a/src/settings.h
+++ b/src/settings.h
@@ -118,7 +118,9 @@ struct settings {
         int text_icon_padding;
         struct separator_color_data sep_color;
         int frame_width;
+        int outer_frame_width;
         char *frame_color;
+        char *outer_frame_color;
         int startup_notification;
         int monitor;
         double scale;
diff --git a/src/settings_data.h b/src/settings_data.h
index 6b83b61..2b1f6da 100644
--- a/src/settings_data.h
+++ b/src/settings_data.h
@@ -436,6 +436,17 @@ static const struct setting allowed_settings[] = {
                 .parser_data = NULL,
                 .rule_offset = offsetof(struct rule, summary),
         },
+        {
+                .name = "outer_frame_color",
+                .section = "*",
+                .description = "Color of the outer frame around the window",
+                .type = TYPE_STRING,
+                .default_value = "#888888",
+                .value = &settings.outer_frame_color,
+                .parser = NULL,
+                .parser_data = NULL,
+                .rule_offset = offsetof(struct rule, ofc),
+        },
 
         // modifying rules below
         {
@@ -1207,6 +1218,16 @@ static const struct setting allowed_settings[] = {
                 .parser = NULL,
                 .parser_data = NULL,
         },
+        {
+                .name = "outer_frame_width",
+                .section = "global",
+                .description = "Width of the outer frame around the window",
+                .type = TYPE_INT,
+                .default_value = "0",
+                .value = &settings.outer_frame_width,
+                .parser = NULL,
+                .parser_data = NULL,
+        },
 
         // These are only used for setting defaults, since there is a rule
         // above doing the same.
@@ -1251,6 +1272,16 @@ static const struct setting allowed_settings[] = {
                 .parser = NULL,
                 .parser_data = NULL,
         },
+        {
+                .name = "outer_frame_color",
+                .section = "urgency_low",
+                .description = "Outer frame color for notifications with low urgency",
+                .type = TYPE_STRING,
+                .default_value = "#888888",
+                .value = &settings.colors_low.outer_frame,
+                .parser = NULL,
+                .parser_data = NULL,
+        },
         {
                 .name = "timeout",
                 .section = "urgency_low",
@@ -1301,6 +1332,16 @@ static const struct setting allowed_settings[] = {
                 .parser = NULL,
                 .parser_data = NULL,
         },
+        {
+                .name = "outer_frame_color",
+                .section = "urgency_normal",
+                .description = "Outer frame color for notifications with normal urgency",
+                .type = TYPE_STRING,
+                .default_value = "#888888",
+                .value = &settings.colors_norm.outer_frame,
+                .parser = NULL,
+                .parser_data = NULL,
+        },
         {
                 .name = "timeout",
                 .section = "urgency_normal",
@@ -1351,6 +1392,16 @@ static const struct setting allowed_settings[] = {
                 .parser = NULL,
                 .parser_data = NULL,
         },
+        {
+                .name = "outer_frame_color",
+                .section = "urgency_critical",
+                .description = "Outer frame color for notifications with critical urgency",
+                .type = TYPE_STRING,
+                .default_value = "#ff0000",
+                .value = &settings.colors_crit.outer_frame,
+                .parser = NULL,
+                .parser_data = NULL,
+        },
         {
                 .name = "timeout",
                 .section = "urgency_critical",
-- 
2.35.1

