# Created 2022-02-10 Thu 00:36
#+title: emacs
#+author: fortuneteller2k

* Lexical Binding
#+begin_src emacs-lisp :tangle yes
  ;; -*- lexical-binding: t; -*-
#+end_src

* Frame Modifications
#+begin_src emacs-lisp :tangle yes
  (tooltip-mode -1)

  (add-to-list 'default-frame-alist '(menu-bar-lines . 0))
  (add-to-list 'default-frame-alist '(tool-bar-lines . 0))
  (add-to-list 'default-frame-alist '(font . "Iosevka FT Light-10.5"))
  (add-to-list 'default-frame-alist '(vertical-scroll-bars))

  (when (window-system)
    (add-to-list 'default-frame-alist '(internal-border-width . 10))
    (add-to-list 'default-frame-alist '(internal-border-width . 0)))

  (setq-default use-dialog-box nil
                custom-file (if (memq system-type '(gnu/linux darwin)) "/dev/null" "NUL")
                frame-inhibit-implied-resize t
                ring-bell-function 'ignore
                visible-bell nil
                uniquify-buffer-name-style 'post-forward-angle-brackets
                inhibit-startup-screen t
                inhibit-startup-message t
                inhibit-startup-echo-area-message t
                initial-scratch-message nil
                package-enable-at-startup nil
                vc-handled-backends nil
                fringes-outside-margins t)
#+end_src

* use-package macro
#+begin_src emacs-lisp :tangle yes
  (defmacro pkg! (name &rest args)
    "`use-package' macro'. Shorter and less cumbersome."
    (declare (indent defun))
    `(use-package ,name
       ,@args))
#+end_src

* preamble
#+begin_src emacs-lisp :tangle yes
  (pkg! no-littering
    :demand t
    :config
    (require 'no-littering))

  (pkg! exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :demand t
    :config
    (exec-path-from-shell-initialize))
#+end_src

* optimization
#+begin_src emacs-lisp :tangle yes
  ;; native compilation
  (setq comp-speed 3
        comp-async-report-warnings-errors nil)

  ;; Temporarily save the file-name-handler-alist
  (defvar temp-file-name-handler-alist file-name-handler-alist)

  ;; Ignore .Xresources
  (advice-add #'x-apply-session-resources :override #'ignore)

  ;; Avoid any GC pauses at init.
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6
        preferred-gc-threshold 16777216)

  (setq-default file-name-handler-alist nil
                create-lockfiles nil
                bidi-display-reordering nil
                cursor-in-non-selected-windows nil
                highlight-nonselected-windows nil
                frame-inhibit-implied-resize t
                inhibit-compacting-font-caches nil)

  ;; and then reset it to 16MiB after with the file-name-handler-alist
  (defun optimization/normalize ()
    (setq-default gc-cons-threshold preferred-gc-threshold
                  gc-cons-percentage 0.1)
    (garbage-collect))

  (add-hook 'emacs-startup-hook #'optimization/normalize)

  (unless (or (daemonp) noninteractive)
    (let ((temp-file-name-handler-alist file-name-handler-alist))
      (setq-default file-name-handler-alist nil)
      (defun reset-file-handler-alist-h ()
        (setq file-name-handler-alist
              (delete-dups (append file-name-handler-alist
                                   temp-file-name-handler-alist))))
      (add-hook 'emacs-startup-hook #'reset-file-handler-alist-h)))

  ;; ESC cancels anything
  (global-set-key (kbd "<escape>") #'keyboard-escape-quit)

  ;; Fundamental Mode is the simplest mode
  (setq initial-major-mode 'fundamental-mode)
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Use the Garbage Collector Magic Hack
  (pkg! gcmh
    :hook
    ((emacs-startup . gcmh-mode)
     (focus-out . gcmh-idle-garbage-collect))
    :custom
    (gcmh-verbose nil)
    (gcmh-idle-delay 6)
    (gcmh-high-cons-threshold 16777216))

  ;; Show only errors, not warnings
  (setq-default warning-minimum-level :error)
#+end_src

* fonts
#+begin_src emacs-lisp :tangle yes
  (defconst fonts/sans
    "Sarasa Gothic J"
    "Default variable width font")

  (defconst fonts/serif
    "Iosevka FT QP Light"
    "Serifed font")

  (defun fonts/set-fonts ()
    (set-face-attribute 'fixed-pitch-serif nil :family fonts/serif)
    (set-face-attribute 'variable-pitch nil :family fonts/sans))

  (defun fonts/enable-ligatures ()
    "Define general ligatures and load them with HarfBuzz."
    (let ((alist  '((?!  . "\\(?:!\\(?:==\\|[!=]\\)\\)")                                      ; (regexp-opt '("!!" "!=" "!=="))
                    (?#  . "\\(?:#\\(?:###?\\|_(\\|[#(:=?[_{]\\)\\)")                         ; (regexp-opt '("##" "###" "####" "#(" "#:" "#=" "#?" "#[" "#_" "#_(" "#{"))
                    (?$  . "\\(?:\\$>>?\\)")                                                  ; (regexp-opt '("$>" "$>>"))
                    (?%  . "\\(?:%%%?\\)")                                                    ; (regexp-opt '("%%" "%%%"))
                    (?&  . "\\(?:&&&?\\)")                                                    ; (regexp-opt '("&&" "&&&"))
                    (?*  . "\\(?:\\*\\(?:\\*[*/]\\|[)*/>]\\)?\\)")                            ; (regexp-opt '("*" "**" "***" "**/" "*/" "*>" "*)"))
                    (?+  . "\\(?:\\+\\(?:\\+\\+\\|[+:>]\\)?\\)")                              ; (regexp-opt '("+" "++" "+++" "+>" "+:"))
                    (?-  . "\\(?:-\\(?:-\\(?:->\\|[>-]\\)\\|<[<-]\\|>[>-]\\|[:<>|}~-]\\)\\)") ; (regexp-opt '("--" "---" "-->" "--->" "->-" "-<" "-<-" "-<<" "->" "->>" "-}" "-~" "-:" "-|"))
                    (?.  . "\\(?:\\.\\(?:\\.[.<]\\|[.=>-]\\)\\)")                             ; (regexp-opt '(".-" ".." "..." "..<" ".=" ".>"))
                    (?/  . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")                      ; (regexp-opt '("/*" "/**" "//" "///" "/=" "/==" "/>"))
                    (?:  . "\\(?::\\(?:::\\|[+:<=>]\\)?\\)")                                  ; (regexp-opt '(":" "::" ":::" ":=" ":<" ":=" ":>" ":+"))
                    (?\; . ";;")                                                              ; (regexp-opt '(";;"))
                    (?0  . "0\\(?:\\(x[a-fA-F0-9]\\).?\\)") ; Tries to match the x in 0xDEADBEEF
                    ;; (?x . "x") ; Also tries to match the x in 0xDEADBEEF
                    ;; (regexp-opt '("<!--" "<$" "<$>" "<*" "<*>" "<**>" "<+" "<+>" "<-" "<--" "<---" "<->" "<-->" "<--->" "</" "</>" "<<" "<<-" "<<<" "<<=" "<=" "<=<" "<==" "<=>" "<===>" "<>" "<|" "<|>" "<~" "<~~" "<." "<.>" "<..>"))
                    (?<  . "\\(?:<\\(?:!--\\|\\$>\\|\\*\\(?:\\*?>\\)\\|\\+>\\|-\\(?:-\\(?:->\\|[>-]\\)\\|[>-]\\)\\|\\.\\(?:\\.?>\\)\\|/>\\|<[<=-]\\|=\\(?:==>\\|[<=>]\\)\\||>\\|~~\\|[$*+./<=>|~-]\\)\\)")
                    (?=  . "\\(?:=\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)\\)")               ; (regexp-opt '("=/=" "=:=" "=<<" "==" "===" "==>" "=>" "=>>"))
                    (?>  . "\\(?:>\\(?:->\\|=>\\|>[=>-]\\|[:=>-]\\)\\)")                      ; (regexp-opt '(">-" ">->" ">:" ">=" ">=>" ">>" ">>-" ">>=" ">>>"))
                    (??  . "\\(?:\\?[.:=?]\\)")                                               ; (regexp-opt '("??" "?." "?:" "?="))
                    (?\[ . "\\(?:\\[\\(?:|]\\|[]|]\\)\\)")                                    ; (regexp-opt '("[]" "[|]" "[|"))
                    (?\\ . "\\(?:\\\\\\\\[\\n]?\\)")                                          ; (regexp-opt '("\\\\" "\\\\\\" "\\\\n"))
                    (?^  . "\\(?:\\^==?\\)")                                                  ; (regexp-opt '("^=" "^=="))
                    (?w  . "\\(?:wwww?\\)")                                                   ; (regexp-opt '("www" "wwww"))
                    (?{  . "\\(?:{\\(?:|\\(?:|}\\|[|}]\\)\\|[|-]\\)\\)")                      ; (regexp-opt '("{-" "{|" "{||" "{|}" "{||}"))
                    (?|  . "\\(?:|\\(?:->\\|=>\\||=\\|[]=>|}-]\\)\\)")                        ; (regexp-opt '("|=" "|>" "||" "||=" "|->" "|=>" "|]" "|}" "|-"))
                    (?_  . "\\(?:_\\(?:|?_\\)\\)")                                            ; (regexp-opt '("_|_" "__"))
                    (?\( . "\\(?:(\\*\\)")                                                    ; (regexp-opt '("(*"))
                    (?~  . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)"))))                                  ; (regexp-opt '("~-" "~=" "~>" "~@" "~~" "~~>"))
      (dolist (char-regexp alist)
        (set-char-table-range composition-function-table (car char-regexp)
                              `([,(cdr char-regexp) 0 font-shape-gstring])))))

  (add-hook 'emacs-startup-hook #'fonts/set-fonts)
  (add-hook 'after-change-major-mode-hook #'fonts/enable-ligatures)
#+end_src

* editor
#+begin_src emacs-lisp :tangle yes
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)

  (setq-default buffer-file-coding-system 'utf-8
                save-buffer-coding-system 'utf-8
                auto-save-default nil
                scroll-step 1
                scroll-conservatively 10000
                auto-window-vscroll nil
                require-final-newline t
                indent-tabs-mode nil
                tab-width 2)

  (add-hook 'emacs-startup-hook #'global-visual-line-mode)

  (pkg! paren
    :hook
    (prog-mode . show-paren-mode))

  (pkg! hl-line
    :hook
    ((prog-mode org-mode text-mode conf-mode) . hl-line-mode))

  (pkg! autorevert
    :hook
    (emacs-startup . global-auto-revert-mode))

  (pkg! super-save
    :hook
    (emacs-startup . super-save-mode)
    :custom
    (super-save-auto-save-when-idle t))

  (pkg! hl-todo
    :hook (prog-mode . hl-todo-mode)
    :custom
    (hl-todo-highlight-punctuation ":")
    (hl-todo-keyword-faces
     `(("TODO" warning bold)
       ("FIXME" error bold)
       ("HACK" font-lock-constant-face bold)
       ("REVIEW" font-lock-keyword-face bold)
       ("NOTE" success bold)
       ("DEPRECATED" font-lock-doc-face bold)
       ("BUG" error bold)
       ("XXX" font-lock-constant-face bold))))

  (defun kill-other-buffers ()
    "Kill all other buffers"
    (interactive)
    (mapc 'kill-buffer
          (delq (current-buffer)
                (remove-if-not 'buffer-file-name (buffer-list)))))

  (global-set-key (kbd "C-c C-k") #'kill-other-buffers)
  (global-set-key (kbd "C-c k") #'kill-buffer-and-window)

  (pkg! evil
    :hook
    (emacs-startup . evil-mode)
    :custom
    (evil-undo-system 'undo-redo))

  (pkg! ctrlf
    :hook
    (emacs-startup . ctrlf-mode))
#+end_src

* interface
#+begin_src emacs-lisp :tangle yes
  (pkg! simple-modeline
    :hook
    (emacs-startup . simple-modeline-mode))

  (pkg! hide-mode-line
    :hook
    ((comint-mode helpful-mode help-mode) . hide-mode-line-mode))

  (pkg! selectrum
    :hook
    (emacs-startup . selectrum-mode))

  (pkg! prescient
    :hook
    (emacs-startup . prescient-persist-mode))

  (pkg! selectrum-prescient
    :hook
    (emacs-startup . selectrum-prescient-mode))

  (pkg! marginalia
    :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (pkg! helpful
    :bind
    (("C-h f" . helpful-callable)
     ("C-h v" . helpful-variable)
     ("C-h k" . helpful-key))
    :config
    (custom-theme-set-faces
     'user
     '(helpful-heading ((t (:inherit variable-pitch))))))

  (pkg! solaire-mode
    :hook
    ((change-major-mode . turn-on-solaire-mode)
     (after-revert . turn-on-solaire-mode)
     (ediff-prepare-buffer . solaire-mode))
    :custom
    (solaire-mode-auto-swap-bg nil)
    :config
    (solaire-global-mode +1))

  (pkg! doom-themes
    :after solaire-mode
    :hook
    (emacs-startup . (lambda () (load-theme 'doom-material-dark t)))
    :config
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t))

  (pkg! olivetti
    :custom
    (olivetti-body-width 140))

  (defun interface/toggle-zen-mode ()
    "Toggle a distraction-free environment for writing."
    (interactive)

    (defface regular-face
      '((nil :family "Iosevka FT Light" :height 105))
      "Regular face")

    (defface zen-mode-face
      '((nil :family "Iosevka FT Light" :height 120))
      "Zen mode face")

    (cond ((bound-and-true-p olivetti-mode)
           (olivetti-mode -1)
           (buffer-face-set 'regular-face))
          (t
           (olivetti-mode +1)
           (buffer-face-set 'zen-mode-face))))

  (global-set-key (kbd "C-x z") 'interface/toggle-zen-mode)

  (pkg! which-key
    :hook
    (emacs-startup . which-key-mode)
    :config
    (which-key-enable-god-mode-support))
#+end_src

* programming
#+begin_src emacs-lisp :tangle yes
  (pkg! company
    :hook
    (prog-mode . company-mode)
    :custom
    (company-idle-delay 0.2)
    (company-tooltip-limit 14)
    (company-tooltip-align-annotations t)
    (company-minimum-prefix-length 1)
    (company-selection-wrap-around t)
    (company-backends '(company-capf))
    (company-format-margin-function nil))

  (pkg! flycheck
    :hook
    (prog-mode . flycheck-mode)
    :custom
    (flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (pkg! flycheck-popup-tip
    :after flycheck
    :hook
    (flycheck-mode . flycheck-popup-tip-mode))

  (pkg! flycheck-posframe
    :after flycheck
    :hook
    (flycheck-mode . flycheck-posframe-mode)
    :config
    (flycheck-posframe-configure-pretty-defaults))

  (pkg! eglot
    :hook
    (eglot--managed-mode . (lambda () (flymake-mode -1))))

  (add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name "Emacs Lisp")))

  (pkg! highlight-quoted
    :hook
    (emacs-lisp-mode . highlight-quoted-mode))

  (pkg! highlight-defined
    :hook
    (emacs-lisp-mode . highlight-defined-mode))

  (pkg! elisp-def
    :hook
    ((emacs-lisp-mode ielm-mode) . elisp-def-mode))

  (pkg! lisp-butt-mode
    :hook
    (emacs-lisp-mode . lisp-butt-mode))

  (pkg! aggressive-indent
    :hook
    (emacs-lisp-mode . aggressive-indent-mode))

  (pkg! nix-mode
    :mode "\\.nix\\'"
    :hook
    (nix-mode . eglot-ensure))

  (pkg! mixed-pitch
    :hook
    (org-mode . mixed-pitch-mode))
#+end_src
